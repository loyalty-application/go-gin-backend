definitions:
  models.AuthLoginRequest:
    properties:
      email:
        example: sudo@soonann.dev
        type: string
      password:
        example: supersecret
        type: string
    type: object
  models.AuthLoginResponse:
    properties:
      created_at:
        example: "2023-03-02T13:10:23Z"
        type: string
      email:
        example: sudo@soonann.dev
        type: string
      first_name:
        example: Soon Ann
        type: string
      last_name:
        example: Tan
        type: string
      password:
        example: hashedsupersecret
        type: string
      phone:
        example: "91234567"
        type: string
      refresh_token:
        example: eyJhb...
        type: string
      token:
        example: eyJhb...
        type: string
      updated_at:
        example: "2023-03-02T13:10:23Z"
        type: string
      user_id:
        example: 6400a...
        type: string
    type: object
  models.AuthRegistrationRequest:
    properties:
      email:
        example: sudo@soonann.dev
        type: string
      password:
        example: supersecret
        type: string
    type: object
  models.AuthRegistrationResponse:
    properties:
      InsertedID:
        example: 6400a...
        type: string
    type: object
  models.Campaign:
    properties:
      accepted_mccs:
        items:
          type: integer
        type: array
      bonus_rates:
        example: 8.8
        type: number
      campaign_id:
        example: cmp00001
        type: string
      card_type:
        example: super_miles_card
        type: string
      description:
        type: string
      end_date:
        type: string
      merchant:
        example: 7-11
        type: string
      min_spend:
        example: 100
        type: number
      start_date:
        type: string
    type: object
  models.CampaignList:
    properties:
      campaigns:
        items:
          $ref: '#/definitions/models.Campaign'
        type: array
    type: object
  models.Card:
    properties:
      card_id:
        example: "4111222233334444"
        type: string
      card_pan:
        example: xyz
        type: string
      card_type:
        example: super_miles_card
        type: string
      user_id:
        example: "12345"
        type: string
      value:
        example: 100
        type: number
      value_type:
        example: miles
        type: string
    type: object
  models.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  models.Transaction:
    properties:
      amount:
        example: 20.1
        type: number
      campaign:
        $ref: '#/definitions/models.Campaign'
      card_id:
        example: "4111222233334444"
        type: string
      card_pan:
        example: xyz
        type: string
      card_type:
        example: super_miles_card
        type: string
      cashback:
        example: 100
        type: number
      currency:
        example: USD
        type: string
      id:
        example: "1"
        type: string
      is_deleted:
        example: false
        type: boolean
      mcc:
        example: "5311"
        type: string
      merchant:
        example: 7-11
        type: string
      miles:
        example: 100
        type: number
      points:
        example: 100
        type: number
      transaction_date:
        example: yyyy-mm-dd hh:mm:ss
        type: string
      transaction_id:
        example: txn00001
        type: string
      user_id:
        example: 6400a...
        type: string
    type: object
  models.TransactionList:
    properties:
      transactions:
        items:
          $ref: '#/definitions/models.Transaction'
        type: array
    type: object
  models.User:
    properties:
      cashback:
        type: number
      created_at:
        type: string
      email:
        type: string
      first_name:
        maxLength: 100
        minLength: 2
        type: string
      last_name:
        maxLength: 100
        minLength: 2
        type: string
      miles:
        type: number
      password:
        minLength: 6
        type: string
      phone:
        type: string
      points:
        type: number
      refresh_token:
        type: string
      token:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - phone
    type: object
  models.UserUpdateRequest:
    properties:
      cards:
        items:
          type: string
        type: array
      email:
        type: string
      first_name:
        maxLength: 100
        minLength: 2
        type: string
      last_name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
    type: object
info:
  contact: {}
  title: go-gin-backend
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Users can login to the application and obtain a JWT token through
        this endpoint
      parameters:
      - description: Login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AuthLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Login
      tags:
      - authentication
  /auth/registration:
    post:
      consumes:
      - application/json
      description: Registration endpoint for user new users to register for an account,
        after registering for an account, the user will be able to login to the system
        and obtain a JWT Token
      parameters:
      - description: Registration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AuthRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthRegistrationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Registration
      tags:
      - authentication
  /campaign:
    get:
      consumes:
      - application/json
      description: Retrieve all campaigns, sorted by start date
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CampaignList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Retrieve all Campaigns
      tags:
      - campaign
  /campaign/{campaign_id}:
    get:
      consumes:
      - application/json
      description: Retrieve Campaign based on campaignId
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: campaign's id
        in: path
        name: campaign_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Campaign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Retrieve Campaign based on campaignId
      tags:
      - campaign
    put:
      consumes:
      - application/json
      description: Update Campaign based on campaignId
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: campaign's id
        in: path
        name: campaign_id
        required: true
        type: string
      - description: campaign
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CampaignList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Campaign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Update Campaign based on campaignId
      tags:
      - campaign
  /campaign/{campaign_id}/delete:
    put:
      consumes:
      - application/json
      description: Delete Campaign based on campaignId
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: campaign's id
        in: path
        name: campaign_id
        required: true
        type: string
      - description: campaign
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CampaignList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Campaign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Delete Campaign based on campaignId
      tags:
      - campaign
  /campaign/{user_id}:
    post:
      consumes:
      - application/json
      description: Create campaigns
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: user's id
        in: path
        name: user_id
        required: true
        type: string
      - description: campaigns
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CampaignList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Campaign'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Create Campaigns for Merchants
      tags:
      - campaign
  /campaign/active/{date}:
    get:
      consumes:
      - application/json
      description: Retrieve Active Campaign based on date
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: campaign's active date
        in: path
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Campaign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Retrieve Active Campaign based on date
      tags:
      - campaign
  /card:
    get:
      consumes:
      - application/json
      description: Retrieve all available cards
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - default: 100
        description: maximum records per page
        in: query
        minimum: 0
        name: limit
        type: integer
      - default: 0
        description: page of records, starts from 0
        in: query
        minimum: 0
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Card'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Retrieve Cards
      tags:
      - card
    post:
      consumes:
      - application/json
      description: Create new Card
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: card
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Card'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Card'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Create Card
      tags:
      - card
  /card/{card_id}:
    get:
      consumes:
      - application/json
      description: Retrieve card based on its card_id
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: card's id
        in: path
        name: card_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Card'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Retrieve specific Card
      tags:
      - card
    put:
      consumes:
      - application/json
      description: Update specific Card
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: card's id
        in: path
        name: card_id
        required: true
        type: string
      - description: card
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Card'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Card'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Update a Card
      tags:
      - card
  /card/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieve all cards registered under the given User's Id
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: user's id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Card'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Retrieve all Cards of given User
      tags:
      - card
  /health:
    get:
      description: Health Check Endpoint that doesn't require authentication
      responses:
        "200":
          description: Success
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Health Check
      tags:
      - health
  /transaction:
    get:
      consumes:
      - application/json
      description: Retrieve all transaction records
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - default: 100
        description: maximum records per page
        in: query
        minimum: 0
        name: limit
        type: integer
      - default: 0
        description: page of records, starts from 0
        in: query
        minimum: 0
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Retrieve Transactions of all Users
      tags:
      - transaction
  /transaction/{transaction_id}:
    put:
      consumes:
      - application/json
      description: Update a Specific Transaction
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: transaction's id
        in: path
        name: transaction_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Update Transaction
      tags:
      - transaction
  /transaction/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieve transaction records of a user
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: user's id
        in: path
        name: user_id
        required: true
        type: string
      - default: 100
        description: maximum records per page
        in: query
        minimum: 0
        name: limit
        type: integer
      - default: 0
        description: page of records, starts from 0
        in: query
        minimum: 0
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Retrieve Transactions of User
      tags:
      - transaction
    post:
      consumes:
      - application/json
      description: Create transaction records
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: user's id
        in: path
        name: user_id
        required: true
        type: string
      - description: transactions
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.TransactionList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Create Transactions for User
      tags:
      - transaction
  /user:
    get:
      consumes:
      - application/json
      description: retrieve all Registered Users
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - default: 100
        description: maximum records per page
        in: query
        minimum: 0
        name: limit
        type: integer
      - default: 0
        description: page of records, starts from 0
        in: query
        minimum: 0
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Get all Users
      tags:
      - user
  /user/{email}:
    get:
      consumes:
      - application/json
      description: retrieve Specific registered User
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Get a User
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update a specific User
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: email
        in: path
        name: email
        required: true
        type: string
      - description: card
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Update User
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
