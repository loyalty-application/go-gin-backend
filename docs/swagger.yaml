definitions:
  models.AuthLoginRequest:
    properties:
      email:
        example: sudo@soonann.dev
        type: string
      password:
        example: supersecret
        type: string
    type: object
  models.AuthLoginResponse:
    properties:
      created_at:
        example: "2023-03-02T13:10:23Z"
        type: string
      email:
        example: sudo@soonann.dev
        type: string
      first_name:
        example: Soon Ann
        type: string
      last_name:
        example: Tan
        type: string
      password:
        example: hashedsupersecret
        type: string
      phone:
        example: "91234567"
        type: string
      refresh_token:
        example: eyJhb...
        type: string
      token:
        example: eyJhb...
        type: string
      updated_at:
        example: "2023-03-02T13:10:23Z"
        type: string
      user_id:
        example: 6400a...
        type: string
    type: object
  models.AuthRegistrationRequest:
    properties:
      email:
        example: sudo@soonann.dev
        type: string
      first_name:
        example: Soon Ann
        type: string
      last_name:
        example: Tan
        type: string
      password:
        example: supersecret
        type: string
      phone:
        example: "91234567"
        type: string
    type: object
  models.AuthRegistrationResponse:
    properties:
      InsertedID:
        example: 6400a...
        type: string
    type: object
  models.Campaign:
    properties:
      campaign_id:
        example: cmp00001
        type: string
      card_type:
        example: super_miles_card
        type: string
      description:
        type: string
      end_date:
        example: "2023-03-03T13:10:23Z"
        type: string
      merchant:
        example: 7-11
        type: string
      start_date:
        example: "2023-03-02T13:10:23Z"
        type: string
    type: object
  models.CampaignList:
    properties:
      campaigns:
        items:
          $ref: '#/definitions/models.Campaign'
        type: array
    type: object
  models.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  models.Transaction:
    properties:
      amount:
        example: 20.1
        type: number
      card_id:
        example: "4111222233334444"
        type: string
      card_pan:
        example: xyz
        type: string
      card_type:
        example: super_miles_card
        type: string
      currency:
        example: USD
        type: string
      id:
        example: 1
        type: integer
      mcc:
        example: "5311"
        type: string
      merchant:
        example: 7-11
        type: string
      points:
        example: 100
        type: integer
      transaction_date:
        example: yyyy-mm-dd hh:mm:ss
        type: string
      transaction_id:
        example: txn00001
        type: string
      user_id:
        example: 6400a...
        type: string
    type: object
  models.TransactionList:
    properties:
      transactions:
        items:
          $ref: '#/definitions/models.Transaction'
        type: array
    type: object
info:
  contact: {}
  title: go-gin-backend
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Users can login to the application and obtain a JWT token through
        this endpoint
      parameters:
      - description: Login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AuthLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Login
      tags:
      - authentication
  /auth/registration:
    post:
      consumes:
      - application/json
      description: Registration endpoint for user new users to register for an account,
        after registering for an account, the user will be able to login to the system
        and obtain a JWT Token
      parameters:
      - description: Registration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AuthRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthRegistrationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Registration
      tags:
      - authentication
  /campaign:
    get:
      consumes:
      - application/json
      description: Retrieve all campaigns, sorted by start date
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CampaignList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Retrieve all Campaigns
      tags:
      - campaign
  /campaign/{campaign_id}:
    delete:
      consumes:
      - application/json
      description: Delete Campaign based on campaignId
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: campaign's id
        in: path
        name: campaign_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Delete Campaign based on campaignId
      tags:
      - campaign
    get:
      consumes:
      - application/json
      description: Retrieve Campaign based on campaignId
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: campaign's id
        in: path
        name: campaign_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Campaign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Retrieve Campaign based on campaignId
      tags:
      - campaign
    put:
      consumes:
      - application/json
      description: Update Campaign based on campaignId
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: campaign's id
        in: path
        name: campaign_id
        required: true
        type: string
      - description: campaign
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CampaignList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Campaign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Update Campaign based on campaignId
      tags:
      - campaign
  /campaign/{user_id}:
    post:
      consumes:
      - application/json
      description: Create campaigns
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: user's id
        in: path
        name: user_id
        required: true
        type: string
      - description: campaigns
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CampaignList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Campaign'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Create Campaigns for Merchants
      tags:
      - campaign
  /health:
    get:
      description: Health Check Endpoint that doesn't require authentication
      responses:
        "200":
          description: Success
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Health Check
      tags:
      - health
  /transaction/:
    get:
      consumes:
      - application/json
      description: Retrieve all transaction records
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - default: 100
        description: maximum records per page
        in: query
        minimum: 0
        name: limit
        type: integer
      - default: 0
        description: page of records, starts from 0
        in: query
        minimum: 0
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Retrieve Transacations of all Users
      tags:
      - transaction
  /transaction/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieve transaction records of a user
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: user's id
        in: path
        name: user_id
        required: true
        type: string
      - default: 100
        description: maximum records per page
        in: query
        minimum: 0
        name: limit
        type: integer
      - default: 0
        description: page of records, starts from 0
        in: query
        minimum: 0
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Retrieve Transactions of User
      tags:
      - transaction
    post:
      consumes:
      - application/json
      description: Create transaction records
      parameters:
      - description: Bearer eyJhb...
        in: header
        name: Authorization
        required: true
        type: string
      - description: user's id
        in: path
        name: user_id
        required: true
        type: string
      - description: transactions
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.TransactionList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Create Transactions for User
      tags:
      - transaction
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
